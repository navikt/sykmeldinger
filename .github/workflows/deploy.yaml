name: Build & Deploy
on: push

permissions:
  actions: read
  contents: read
  security-events: write
  packages: write
  id-token: write

jobs:
  next-app:
    name: Build and deploy next app
    uses: navikt/teamsykmelding-github-actions-workflows/.github/workflows/next-app.yaml@main
    secrets: inherit
    with:
      app: sykmeldinger
      base-path: /syk/sykmeldinger

  prebuild-app-for-playwright:
    name: Prebuild image for sharded playwright tests
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ github.repository }}-e2e
      REGISTRY: ghcr.io
    steps:
      - uses: navikt/teamsykmelding-github-actions-workflows/actions/yarn-cached@main
        with:
          NPM_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: Build e2e version of app
        run: |
          cp .nais/envs/.env.demo .env.production
          yarn build:e2e
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    outputs:
      image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  run-playwright:
    needs: [prebuild-app-for-playwright]
    name: Playwright shard ${{ matrix.shardIndex }}
    runs-on: ubuntu-latest
    services:
      app:
        image: ${{ needs.prebuild-app-for-playwright.outputs.image }}
        ports: ['3000:3000']
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    steps:
      - uses: navikt/teamsykmelding-github-actions-workflows/actions/yarn-cached@main
        with:
          NPM_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: Infer playwright version
        run: |
          echo "PLAYWRIGHT_VERSION=$(yarn why playwright --json | jq -r '.value' | awk -F: '{print $2}')" >> $GITHUB_ENV
      - name: Cache playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          key: playwright-${{ env.PLAYWRIGHT_VERSION }}
          path: ~/.cache/ms-playwright
      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: yarn playwright install --with-deps
      - name: Run Playwright
        run: yarn e2e --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
      - name: Upload blob report to GitHub Actions Artifacts
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.shardIndex }}
          path: blob-report
          retention-days: 1

  merge-reports:
    if: ${{ !cancelled() }}
    needs: [run-playwright]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge into HTML Report
        run: npx playwright merge-reports --reporter html ./all-blob-reports

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report--attempt-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 14

      - name: Upload HTML report to CDN
        uses: nais/deploy/actions/cdn-upload/v2@master
        with:
          team: teamsykmelding
          source: playwright-report
          destination: /${{ github.repository }}/${{ github.run_number }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}

      - name: Merge to json report
        run: npx playwright merge-reports --reporter json  ./all-blob-reports > playwright-report/report.json

      - name: Make fancy GHA Summary
        run: |
          total_tests=$(jq '.stats.expected + .stats.unexpected' playwright-report/report.json)
          passed_tests=$(jq '.stats.expected' playwright-report/report.json)
          failed_tests=$(jq '.stats.unexpected' playwright-report/report.json)
          failed_test_info=$(jq -r '.suites[].specs[] | select(.ok == false) | "\(.title) (\(.file), \(.tests[].projectName))"' playwright-report/report.json)
          echo "## Playwright Test Report Summary" >> $GITHUB_STEP_SUMMARY
          echo "Total tests: $total_tests ✅" >> $GITHUB_STEP_SUMMARY
          echo "Passed tests: $passed_tests ✅" >> $GITHUB_STEP_SUMMARY
          if [ "$failed_tests" -gt 0 ]; then
            echo "Failed tests: $failed_tests ❌" >> $GITHUB_STEP_SUMMARY
            echo "### Failed Tests:" >> $GITHUB_STEP_SUMMARY
            while IFS= read -r test; do
              echo "- $test ❌" >> $GITHUB_STEP_SUMMARY
            done <<< "$failed_test_info"
          else
            echo "Failed tests: $failed_tests 🔹" >> $GITHUB_STEP_SUMMARY
          fi
          echo "Se hele rapporten [her](https://cdn.nav.no/teamsykmelding/${{ github.repository }}/${{ github.run_number }}/playwright-report/index.html)." >> $GITHUB_STEP_SUMMARY
